const app = require('../app');
const debug = require('debug')('AcademiBot:server');
const http = require('http');

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const port = app.get('port');
  const bind = typeof port === 'string' ? ('Pipe' + port) : ('Port' + port);

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges.');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use.');
      process.exit(1);
      break;
    case 'PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR':
      console.error(error);
      process.exit(1);
      break;
    case 'PROTOCOL_CONNECTION_LOST':
      console.error(error);
      process.exit(1);
      break;
    default:
      throw error;
  }
}
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? ('pipe ' + addr) : ('port ' + addr.port);
  debug('Listening on ' + bind);

}
function onSIGTERM() {
  console.log('SIGTERM signal received, closing server...');
  server.close(err => {
    if (err) console.error(err);
    console.log('Server closed.');
    if (app.enabled('onExitOperations') && 'start' in Object(app.get('onExitOperations'))) {
      console.log('Executing exit operations');
      app.get('onExitOperations')
        .start(err => {
          if (err) console.error(err);
          console.log('Operations finished, exiting process...');
          process.exit(0);
        })
    } else {
      console.log('Exiting process...');
      process.exit(0);
    }
  })

}

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const server = http.createServer(app);
server.listen(app.get('port'));
server.on('error', onError);
server.on('listening', onListening);
process.on('SIGTERM', onSIGTERM);