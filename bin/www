'use strict';
const { randomPing } = require('../lib');
const app = require('../app');
const debug = require('debug')('AcademiBot:server');
const http = require('http');
const port = normalizePort(process.env.PORT || '3000');
const server = http.createServer(app);
const PING_TIMEOUT = parseInt(process.env.PING_TIMEOUT);
const URL = process.env.ACADEMIBOT_URL;
const sequelize = require('../config/database');

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const port = app.get('port');
  const bind = typeof port === 'string' ? ('Pipe' + port) : ('Port' + port);

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges.');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use.');
      process.exit(1);
      break;
    case 'PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR':
      process.exit(1);
      break;
    case 'PROTOCOL_CONNECTION_LOST':
      process.exit(1);
      break;
    default:
      console.log(error);
  }
}
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? ('pipe ' + addr) : ('port ' + addr.port);
  debug('Listening on ' + bind);
  randomPing(URL, PING_TIMEOUT);
}
function onSIGTERM() {
  console.log('SIGTERM signal received, closing server...');
  server.close(err => {
    if (err) console.error(err);
    console.log('Server closed.');
    sequelize.close();
    process.exit(0);
  })

}


app.set('port', port);
app.set('env', process.env.ENVIRONMENT);
sequelize.sync({ force: false });
server.listen(app.get('port'));
server.on('error', onError);
server.on('listening', onListening);
process.on('SIGTERM', onSIGTERM);